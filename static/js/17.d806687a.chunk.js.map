{"version":3,"sources":["views/User/Forms/Forms.js"],"names":["TopicSchema","Yup","shape","name","required","discription","Forms","props","state","teams","course","fetch","method","headers","then","response","json","data","teamsFromApi","tours","map","team","value","_id","display","setState","concat","console","log","catch","error","initialValues","validationSchema","onSubmit","values","body","JSON","stringify","courseId","result","resp","warn","message","err","errors","touched","status","className","onChange","e","target","key","htmlFor","type","firstName","component","lastName","React","Component"],"mappings":"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","file":"static/js/17.d806687a.chunk.js","sourcesContent":["import React from 'react';\n import { Formik, Form, Field,ErrorMessage  } from 'formik';\n import * as Yup from 'yup';\n import Style from './Form.css';\n \n const TopicSchema = Yup.object().shape({\n                    name: Yup.string()\n                        .required('Name is required'),\n                    discription: Yup.string()\n                        .required('Details is required')\n                   \n });\n\nclass Forms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      teams:[],\n      course:'',\n    };\n  }\ncomponentDidMount() {\n  fetch('http://localhost:4000/api/tour', {\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n    },\n})\n    .then((response) => {\n        return response.json();\n    })\n    .then(data => {\n      let teamsFromApi = data.data.tours.map(team => { return { value: team._id, display: team.name } })\n        this.setState({ teams: [{ value: '', display: 'Select Role type' }].concat(teamsFromApi) });\n        console.log(\"data\",data.data.tours);\n        console.log(\"teamsfromApi\", teamsFromApi);\n    }).catch(error => {\n        console.log(error);\n    });\n}\n  \n  render() {\n    return (\n      <div>\n     <h1>Add User</h1>\n     <Formik\n       initialValues={{\n        name: '',\n        discription: ''\n       }}\n       validationSchema={TopicSchema}\n       onSubmit={values => {\n         // same shape as initial values\n         console.log(values);\n         fetch('http://localhost:4000/api/topic', {\n          method: \"POST\",\n          headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n          },\n          body: JSON.stringify({\n            name: values.name,\n            discription: values.discription,\n            courseId: this.state.course,\n          })\n      }).then((result) => {\n          result.json().then((resp) => {\n              console.warn(\"resp\", resp.message);\n          //    window.location.href = '/#/app/company/data';\n          })\n\n      })\n          .catch(err => {\n              console.error(err)\n          })\n        \n       }}\n     >\n      {({ errors, status, touched }) => (\n                    <Form>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col\">\n                              <div className=\"row\">\n                              <div className=\"col-2\">\n                                <label className=\"TxtLbl\">Course</label>\n                            </div>\n                            <div className=\"col-3\">\n                            <select value={this.state.course} className=\"custom-select mt-3\"\n                                onChange={(e) => this.setState({ course: e.target.value })}>\n                                {this.state.teams.map((team) => <option key={team.value} value={team.value}>{team.display}</option>)}\n                            </select>\n                               \n                            </div>\n                            </div>\n                            </div>\n                          </div>\n                          <div className=\"form-row\">\n                            <div className=\"form-group col\">\n                                <div className=\"row\">\n                                    <div className=\"col-2\">\n                                      <label htmlFor=\"name\" className=\"TxtLbl\">Topic</label>\n                                    </div>\n                                    <div className=\"col-5\">\n                                      <Field name=\"name\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                      <ErrorMessage name=\"name\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                            </div>\n                          </div>  \n                            <div className=\"form-row\">\n                                  <div className=\"form-group col\">\n                                    <div className=\"row\">\n                                      <div className=\"col-2\">\n                                      <label htmlFor=\"discription\" className=\"TxtLbl\">Discription</label>\n                                      </div>\n                                   \n                                     <div className=\"col-5\">\n                                     <Field name=\"discription\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                      <ErrorMessage name=\"discription\" component=\"div\" className=\"invalid-feedback\" />\n                                     </div>\n                                    </div> \n                                  </div>\n                            </div>\n                        \n                        <div className=\"form-group\">\n                          <div className=\"row\">\n                            <div className=\"col-2\">\n\n                            </div>\n                            <div className=\"col-5\">\n                            <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                            </div>\n                          </div>\n                        </div>\n                    </Form>\n                )}\n     </Formik>\n   </div>\n    );\n  }\n}\n\nexport default Forms;\n"],"sourceRoot":""}